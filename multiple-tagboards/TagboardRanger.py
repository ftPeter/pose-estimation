#!/usr/bin/python3
#
# TagboardRanger
#
# Tool for identifying and calculating
# the distance to other robots using
# aruco tag boards
#
# Peter F. Klemperer
# February 10, 2018

import cv2
import numpy as np
import cv2.aruco as aruco


class Ranger:
    def __init__(self):

        # ARUCO TAG SETUP
        # LOAD DICTIONARY
        self.aruco_dict = aruco.Dictionary_get(aruco.DICT_6X6_250)
        # read the cameraParameters.xml file generated by
        # opencv_interactive-calibration
        camera_reader = cv2.FileStorage()
        #camera_param_file = "cameraParameters-PK-RasberryPi-Camera-8MP.xml"
        camera_param_file = "cameraParameters.xml"

        camera_reader.open(camera_param_file, cv2.FileStorage_READ)
        # camera configurations
        self.camera_matrix = Ranger.read_node_matrix(camera_reader, "cameraMatrix")
        self.dist_coeffs   = Ranger.read_node_matrix(camera_reader, "dist_coeffs")

        # DEFINE TAG BOARDS
        self.define_boards()

        # CAMERA SETUP
        # Open Camera capture stream
        self.cap = cv2.VideoCapture(0)
        # set exposure and etc here...

    @staticmethod
    def read_node_matrix(reader, name):
        node = reader.getNode(name)
        return node.mat()

    def define_boards(self):
        # TODO expand to include all known boards
        # load the Dual Zumo tag boards
        self.axis_length_inches = 0.0508
        hexagon_corners = [
            np.array([[-0.023, 0.048,0.044], [0.023, 0.048, 0.044],
                      [0.023,0.003,0.044], [-0.023, 0.003, 0.044]], dtype=np.float32),
            np.array([[0.027, 0.048,0.042], [0.050, 0.048, 0.002],
                      [0.050, 0.003,0.002], [0.027, 0.003, 0.042]], dtype=np.float32),
            np.array([[0.050, 0.048,-0.002], [0.027, 0.048,-0.042],
                      [0.028, 0.003,-0.042], [0.050, 0.003,-0.002]], dtype=np.float32),
            np.array([[0.023, 0.048, -0.044], [-0.023, 0.048, -0.044],
                      [-0.023,0.003, -0.044], [0.023, 0.003, -0.044]], dtype=np.float32),
            np.array([[-0.027, 0.048, -0.042], [-0.050, 0.048, -0.002],
                      [-0.050,0.003, -0.002], [-0.027, 0.003, -0.042]], dtype=np.float32),
            np.array([[-0.049, 0.048, 0.002], [-0.027, 0.048, 0.042],
                      [-0.028, 0.003, 0.042], [-0.049, 0.003, 0.002]], dtype=np.float32)]
        # PORT TAG BOARD
        self.port_board_ids = np.array(
            [[21], [22], [23], [24], [25], [26]], dtype=np.int32)
        self.port_board = aruco.Board_create(hexagon_corners,
                                             aruco.getPredefinedDictionary(
                                               aruco.DICT_6X6_250),
                                             self.port_board_ids)
        # STARBOARD TAG BOARD
        self.star_board_ids = np.array(
            [[27], [28], [29], [30], [31], [32]], dtype=np.int32)
        self.star_board = aruco.Board_create(hexagon_corners,
                                             aruco.getPredefinedDictionary(
                                               aruco.DICT_6X6_250),
                                             self.star_board_ids)
        self.board_list = [self.port_board, self.star_board]

    def get_board_list(self):
        return self.board_list

    def capture(self):
        # Read frame from Camera
        # convert frame to grayscale
        self.cap.grab()
        ret, self.frame = self.cap.retrieve()
        gray = cv2.cvtColor(self.frame, cv2.COLOR_BGR2GRAY)

        # identify markers
        self.corners, self.visible_ids, rejectedImgPoints = aruco.detectMarkers(
            gray, self.aruco_dict)
        return self.get_visible_ids()

    def get_frame(self):
        return self.frame

    def get_visible_ids(self):
        return self.visible_ids

    def get_rvecs(self):
        return self.rvecs

    def get_tvecs(self):
        return self.tvecs

    def get_tvec(self, id_num):
        if (self.tvecs is None):
            return None
        for i in range(self.get_visible_ids()):
            if id_num == self.get_visible_ids()[i]:
                return self.tvecs[i] / 4
        return None

    def get_visible_board_set(self):
        visible_boards_set = set()
        for board in self.get_board_list():
            for id in board.ids.tolist():
                if( self.is_id_visible( id ) ):
                    visible_boards_set.add( board )
        return visible_boards_set

    def is_id_visible(self, id_num):
        # ids is empty, then fail
        if(self.get_visible_ids() is None):
            return False
        # given id list, check for id_num in ids
        if(id_num in self.get_visible_ids()):
            return True
        # all other possibilities fail
        return False

    # TODO add bearing to board capability
    def get_bearing(self, id_num):
        if(not self.is_id_visible(id_num)):
            return None
        tvec = self.get_tvec(id_num)
        opposite = tvec[0, 0]
        adjacent = tvec[0, 2]
        bearing = np.arctan(opposite / adjacent) * 180 / 3.14 + 12.5
        return bearing

    def get_boardname_range(self, board_name_str):
        # TODO expand to use dictionary or something when more boards
        # are known
        if(board_name_str is "star_board"):
            return self.get_board_range( self.star_board )
        elif(board_name_str is "port_board"):
            return self.get_board_range( self.port_board )
        # board unknown
        return None

    def get_board_range(self, board):
        detected_board_ids     = list()
        detected_board_corners = list()

        if(self.get_visible_ids() is not None):
            for i in range(len(self.get_visible_ids())):
                detected_id     = self.get_visible_ids()[i]
                detected_corner = self.corners[i]

                if(detected_id in board.ids.tolist()):
                    detected_board_ids.append(detected_id)
                    detected_board_corners.append(detected_corner)

        if(detected_board_ids):
            detected_board_ids     = np.asarray(detected_board_ids)
            detected_board_corners = np.asarray(detected_board_corners)
            retval, rvec, tvec = aruco.estimatePoseBoard(detected_board_corners,
                                                         detected_board_ids, board,
                                                         self.camera_matrix, self.dist_coeffs)
            self.frame = aruco.drawAxis(
                self.frame,
                self.camera_matrix,
                self.dist_coeffs,
                rvec,
                tvec,
                self.axis_length_inches)
            distance_to_board = np.linalg.norm(tvec)
            return distance_to_board
        # board not visible, distance unknown
        return None

    def get_range(self, id_num):
        if(not self.is_id_visible(id_num)):
            return None
        tvec = self.get_tvec(id_num)
        return np.linalg.norm(tvec)

    def close(self):
        self.cap.release()

# TagboardRanger Self Test
if __name__ == '__main__':
    ranger = Ranger()

    while(True):
        ranger.capture()
        print( ranger.get_visible_board_set() )
        starboard_range = ranger.get_boardname_range("star_board")
        portboard_range = ranger.get_boardname_range("port_board")
        print("starboard board range = ", starboard_range)
        print("portboard board range = ", portboard_range)

        frame = ranger.get_frame()

        cv2.imshow('frame', frame)
        if( cv2.waitKey(1) & 0xFF == ord('q') ):
            break

    ranger.close()
    cv2.destroyAllWindows()
